// Created by Microsoft (R) C/C++ Compiler Version 12.00.8447.0 (0e62a481).
//
// PDXTrans.tli
//
// Wrapper implementations for Win32 type library ..\PDXTrans\PDXTrans.tlb
// compiler-generated file created 07/29/00 at 11:35:16 - DO NOT EDIT!

#pragma once

//
// interface myIDXEffect wrapper method implementations
//

inline long myIDXEffect::GetCapabilities ( ) {
    long _result;
    HRESULT _hr = get_Capabilities(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float myIDXEffect::GetProgress ( ) {
    float _result;
    HRESULT _hr = get_Progress(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void myIDXEffect::PutProgress ( float pVal ) {
    HRESULT _hr = put_Progress(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline float myIDXEffect::GetStepResolution ( ) {
    float _result;
    HRESULT _hr = get_StepResolution(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline float myIDXEffect::GetDuration ( ) {
    float _result;
    HRESULT _hr = get_Duration(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void myIDXEffect::PutDuration ( float pVal ) {
    HRESULT _hr = put_Duration(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IDXTPandaZoom wrapper method implementations
//

inline enum DXZOOMSTYLE IDXTPandaZoom::GetZoomStyle ( ) {
    enum DXZOOMSTYLE _result;
    HRESULT _hr = get_ZoomStyle(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IDXTPandaZoom::PutZoomStyle ( enum DXZOOMSTYLE pVal ) {
    HRESULT _hr = put_ZoomStyle(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IDXTPandaZoom::GetCopyright ( ) {
    BSTR _result;
    HRESULT _hr = get_Copyright(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IDXTPandaZoom::PutCopyright ( _bstr_t pVal ) {
    HRESULT _hr = put_Copyright(pVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}
